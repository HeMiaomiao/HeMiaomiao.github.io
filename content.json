{"meta":{"title":"Miaomiao's Blog","subtitle":"","description":"��ӭ�����ҵĲ���","author":"Miaomiao","url":"https://hemiaomiao.github.io","root":"/"},"pages":[{"title":"about","date":"2020-01-10T14:14:36.000Z","updated":"2021-09-17T14:46:57.609Z","comments":false,"path":"about/index.html","permalink":"https://hemiaomiao.github.io/about/index.html","excerpt":"","text":"[さくら荘のmiaomiao] 与&nbsp; miaomiao&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"links","date":"2020-01-10T15:11:06.000Z","updated":"2021-09-17T14:44:14.476Z","comments":true,"path":"links/index.html","permalink":"https://hemiaomiao.github.io/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-12T14:14:16.000Z","updated":"2021-01-13T11:11:39.799Z","comments":true,"path":"tags/index.html","permalink":"https://hemiaomiao.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo博客添加画板娘","slug":"hexo博客添加画板娘","date":"2021-09-17T15:21:02.000Z","updated":"2021-09-17T15:21:03.002Z","comments":true,"path":"2021/09/17/hexo博客添加画板娘/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/17/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%94%BB%E6%9D%BF%E5%A8%98/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"tag1","slug":"tag1","permalink":"https://hemiaomiao.github.io/tags/tag1/"}],"author":"Miaomiao"},{"title":"hexo Sakura主题的文章复制功能","slug":"hexo-Sakura主题的文章复制功能","date":"2021-09-17T13:07:03.000Z","updated":"2021-09-17T14:23:37.682Z","comments":true,"path":"2021/09/17/hexo-Sakura主题的文章复制功能/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/17/hexo-Sakura%E4%B8%BB%E9%A2%98%E7%9A%84%E6%96%87%E7%AB%A0%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/","excerpt":"","text":"1. 找到 sakura-app.jssakura-app.js 位置： E:\\Blog\\themes\\Sakura\\source\\js 2. 在sakura-app.js里面使用快捷键 Ctrl + F 搜索 setClipboardText，修改代码 修改后的代码如下：function add_copyright () { document.body.addEventListener('copy', function (e) { if (!mashiro_global.is_user_logged_in &amp;&amp; window.getSelection().toString().length &gt; 3) { setClipboardText(e) } }) function setClipboardText (event) { event.preventDefault() var textData = window.getSelection().toString().replace(/\\r\\n/g, '\\n') if (event.clipboardData) { addComment.createButterbar('复制成功！', 1000) event.clipboardData.setData('text', textData) } else if (window.clipboardData) { return window.clipboardData.setData('text', textData) } } }","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hemiaomiao.github.io/tags/hexo/"},{"name":"Sakura主题","slug":"Sakura主题","permalink":"https://hemiaomiao.github.io/tags/Sakura%E4%B8%BB%E9%A2%98/"}],"author":"Miaomiao"},{"title":"hexo Sakura主题设置文章按照top值排序","slug":"hexo-Sakura主题设置文章按照top值排序","date":"2021-09-17T02:25:54.000Z","updated":"2021-09-17T03:14:08.989Z","comments":true,"path":"2021/09/17/hexo-Sakura主题设置文章按照top值排序/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/17/hexo-Sakura%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E6%96%87%E7%AB%A0%E6%8C%89%E7%85%A7top%E5%80%BC%E6%8E%92%E5%BA%8F/","excerpt":"","text":"1. 卸载hexo-generator-index插件hexo站点目录下，输入下面命令卸载默认的排序插件npm uninstall hexo-generator-index --save 2. 安装hexo-generator-index-pin-top插件hexo站点目录下，输入下面命令安装新的排序插件npm install hexo-generator-index-pin-top --save 3. 添加front-matter配置项在需要置顶的文章的Front-matter中加上top: 数值即可实现文章按照top值排序。比如下面这篇文章：title: test date: 2021-09-17 10:25:54 categories: 技术 top: 1 注意： 经过以上三步，博客文章按照top值排序的功能按理说已经可以实现了，但是Sakura主题有一点不同。因为Sakura主题在themes\\sakura\\layout_partial\\文件里面的archive.ejs 和 category-archive.ejs 中设置了按照日期排序，所以还需要修改archive.ejs 和 category-archive.ejs 4. 修改themes\\Sakura\\layout_partial文件里面的 archive.ejs 和 category-archive.ejs （ 仅Sakura主题需要进行第四步 ）原来的archive.ejs:&lt;% if (pagination == 2){ %&gt; &lt;!-- 首页默认取最最新文章集 --&gt; &lt;% page.posts.sort('date', theme.homePageSortType).limit(theme.homeArticleShown).each(function(post, index){ %&gt; &lt;%- partial('_widget/index-items', {index: index, post: post}) %&gt; &lt;% }) %&gt; &lt;% } else { %&gt; &lt;% page.posts.each(function(post, index){ %&gt; &lt;%- partial('_widget/index-items', {index: index, post: post}) %&gt; &lt;% }) %&gt; &lt;% } %&gt; 修改后的archive.ejs：&lt;!-- 两篇文章以上 --&gt; &lt;% if (pagination &gt;= 2){ %&gt; &lt;!-- 置顶文章 --&gt; &lt;% page.posts.each(function(post, index){ %&gt; &lt;% if (post.top){ %&gt; &lt;%- partial('_widget/index-items', {index: index, post: post}) %&gt; &lt;% } %&gt; &lt;% }) %&gt; &lt;!-- 首页默认取最最新文章集 --&gt; &lt;% page.posts.sort('date', theme.homePageSortType).limit(theme.homeArticleShown).each(function(post, index){ %&gt; &lt;!-- 其余文章 --&gt; &lt;% if (!post.top){ %&gt; &lt;%- partial('_widget/index-items', {index: index, post: post}) %&gt; &lt;% } %&gt; &lt;% }) %&gt; &lt;% } else { %&gt; &lt;% page.posts.each(function(post, index){ %&gt; &lt;%- partial('_widget/index-items', {index: index, post: post}) %&gt; &lt;% }) %&gt; &lt;% } %&gt; 原来的category-archive.ejs：&lt;% if (pagination == 2){ %&gt; &lt;!-- 首页默认取最最新文章集 --&gt; &lt;% page.posts.sort('date', theme.homePageSortType).limit(theme.homeArticleShown).each(function(post, index){ %&gt; &lt;%- partial('_widget/category-items', {index: index, post: post}) %&gt; &lt;% }) %&gt; &lt;% } else { %&gt; &lt;% page.posts.each(function(post, index){ %&gt; &lt;%- partial('_widget/category-items', {index: index, post: post}) %&gt; &lt;% }) %&gt; &lt;% } %&gt; 修改后的category-archive.ejs：&lt;% if (pagination &gt;= 2){ %&gt; &lt;!-- 置顶文章 --&gt; &lt;% page.posts.each(function(post, index){ %&gt; &lt;% if (post.top){ %&gt; &lt;%- partial('_widget/category-items', {index: index, post: post}) %&gt; &lt;% } %&gt; &lt;% }) %&gt; &lt;!-- 首页默认取最最新文章集 --&gt; &lt;% page.posts.sort('date', theme.homePageSortType).limit(theme.homeArticleShown).each(function(post, index){ %&gt; &lt;!-- 其余文章 --&gt; &lt;% if (!post.top){ %&gt; &lt;%- partial('_widget/category-items', {index: index, post: post}) %&gt; &lt;% } %&gt; &lt;% }) %&gt; &lt;% } else { %&gt; &lt;% page.posts.each(function(post, index){ %&gt; &lt;%- partial('_widget/category-items', {index: index, post: post}) %&gt; &lt;% }) %&gt; &lt;% } %&gt; 5. 重新部署hexo clean hexo g hexo d","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hemiaomiao.github.io/tags/hexo/"},{"name":"Sakura主题","slug":"Sakura主题","permalink":"https://hemiaomiao.github.io/tags/Sakura%E4%B8%BB%E9%A2%98/"}],"author":"Miaomiao"},{"title":"电脑壁纸","slug":"电脑壁纸","date":"2021-09-16T10:02:11.000Z","updated":"2021-09-17T09:14:11.461Z","comments":true,"path":"2021/09/16/电脑壁纸/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/16/%E7%94%B5%E8%84%91%E5%A3%81%E7%BA%B8/","excerpt":"","text":"https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171643661.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171643016.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645677.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161804504.png https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171643209.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171643203.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644631.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645207.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645895.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644047.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645086.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645961.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645236.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645030.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645154.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645036.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645879.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645428.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645010.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645811.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645374.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645061.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645027.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644951.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171645972.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644301.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644266.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644091.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644265.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644734.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644271.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644367.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644337.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644239.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644396.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644092.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644434.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109171644176.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161915808.png https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161917661.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805481.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805278.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805773.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805923.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805284.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805421.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805136.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805603.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805187.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805224.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805972.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805523.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805207.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805866.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805753.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161805892.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806483.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806582.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806531.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806280.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806928.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806065.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806503.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806290.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806982.jpg https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806380.png https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806689.png https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806675.png https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806623.png https://cdn.jsdelivr.net/gh/HeMiaomiao/cdn/blogImage/202109161806068.png https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/startdash/bilibili.jpg https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/startdash/sakura.md.png https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/startdash/wangshiwu.jpg https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/music.jpg https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/about.jpg","categories":[{"name":"杂项","slug":"杂项","permalink":"https://hemiaomiao.github.io/categories/%E6%9D%82%E9%A1%B9/"}],"tags":[{"name":"壁纸","slug":"壁纸","permalink":"https://hemiaomiao.github.io/tags/%E5%A3%81%E7%BA%B8/"}],"author":"Miaomiao"},{"title":"clash for windows使用教程","slug":"clash-for-windows使用教程","date":"2021-09-16T08:45:34.000Z","updated":"2021-09-17T12:45:47.680Z","comments":true,"path":"2021/09/16/clash-for-windows使用教程/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/16/clash-for-windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","excerpt":"","text":"1. 下载安装 clash for windows选择合适自己机型的版本 clash for windows的下载地址 2. 设置节点的订阅链接方法1 方法2 3. 选择合适的节点节点一旁的数字代表延迟时间 4. 设置开机启动 设置节点的更新时间的步骤如下 注意: 每次关机的时候需要把clash for windows 退出 5. 下载安装SwitchyOmega插件SwitchyOmega插件的下载地址 下载成功之后，把SwitchyOmega插件的后缀.crx改成.zip，然后把zip文件解压 6. chrome浏览器加载已经解压的SwitchyOmega_Chromium插件会显示一个错误，不用管 7. 配置情景模式设置代理服务器和端口号 8. 配置自动切换设置需要代理网站的域名 9. 在浏览器上自由切换代理模式","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"Miaomiao"},{"title":"hexo Sakura主题美化教程","slug":"hexo-Sakura主题美化教程","date":"2021-09-13T08:27:02.000Z","updated":"2021-09-17T15:42:14.641Z","comments":true,"path":"2021/09/13/hexo-Sakura主题美化教程/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/13/hexo-Sakura%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B/","excerpt":"","text":"站点配置文件 ———&gt; 博客的根目录/_config.yml主题配置文件 ———&gt; 博客的根目录/themes/next/_config.yml一. 设置文章的分类和标签博客的根目录\\themes\\Sakura\\languages\\zh-cn 二. 修改手机端的首页的底部博客的根目录\\themes\\Sakura\\layout_partial\\mheader.ejs 三. 修改每篇博客的底部博客的根目录\\themes\\Sakura\\layout_partial\\footer.ejs 四. 添加友链博客的根目录\\source\\links\\index 博客的根目录\\themes\\Sakura\\layout\\links.ejs 五. 关于的页面博客的根目录\\source\\about\\index 六. 设置hexo new “” 生成的博客的模板 在使用命令hexo new “博客名字”的时候，就是基于post.md脚手架来创建文章的markdown文件 博客的根目录\\scaffolds\\post 七. 使用搜索功能npm install hexo-generator-json-content --save 八. 图片背景1.博客的背景图片 博客的根目录\\themes\\Sakura_config.yml里面的bg属性 2.博客的头像博客的根目录\\themes\\Sakura_config.yml里面的avatar属性 3.设置点击标签之后显示的背景图片 E:\\Blog\\themes\\Sakura\\languages\\zh-cn里面的 标签: img: 图片地址 4.点击标签之后显示的头像背景博客文章里面的photos属性 5.博客封面图片 博客文章里面的photos属性 6.博客里面的头像图片 博客文章里面的avatar属性 7.博客里面的封面 博客文章里面的photos属性 Sakura主题教程1 Sakura主题教程2 Sakura主题教程3 Sakura主题教程4 Sakura主题教程5 Sakura主题教程6","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hemiaomiao.github.io/tags/hexo/"},{"name":"Sakura主题","slug":"Sakura主题","permalink":"https://hemiaomiao.github.io/tags/Sakura%E4%B8%BB%E9%A2%98/"}],"author":"Miaomiao"},{"title":"hexo+github搭建个人博客的教程","slug":"hexo-github搭建个人博客的教程","date":"2021-09-13T08:22:38.000Z","updated":"2021-09-16T16:27:18.648Z","comments":true,"path":"2021/09/13/hexo-github搭建个人博客的教程/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/13/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%95%99%E7%A8%8B/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"eg","slug":"eg","permalink":"https://hemiaomiao.github.io/tags/eg/"}],"author":"Miaomiao"},{"title":"jsDelivr+PicGo+github搭建个人图床","slug":"jsDelivr+PicGo+github搭建个人图床","date":"2021-09-12T12:18:44.000Z","updated":"2021-09-16T16:26:53.373Z","comments":true,"path":"2021/09/12/jsDelivr+PicGo+github搭建个人图床/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/12/jsDelivr+PicGo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/","excerpt":"","text":"前言1.CDN加速CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。 放在github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度。 2.jsDelivrjsDelivr是一个免费开源的CDN 解决方案，最大特点是支持github加速。jsDelivr和github结合起来就有了免费、快速的CDN,非常适合博客网站使用 步骤1： 在github新建一个仓库，用来存放博客图片 步骤2： 创建token令牌，并且复制保存该令牌 注意： token令牌只出现一次，所以要保存一下步骤3：下载PicGo下载地址：PicGo官网 注意： .exe为Windows系统版，.dmg为苹果系统版本 步骤4： 配置PicGo 注意：自定义域名的格式是： https://cdn.jsdelivr.net/gh/github用户名/仓库名 （这样就使用了jsDeliver进行DNS加速） 注意：把“PicGo设置”中的“时间戳重命名”打开，这样防止上传和github图床里面同名的图片的时候上传失败，比如图床已经有了3.png，现在如果不选择时间戳重命名，再上传一个名字是3.png的图片就会上传失败 通过PicGo上传图片成功之后，在github的仓库里面就会有该图片了","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hemiaomiao.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://hemiaomiao.github.io/tags/github/"}],"author":"Miaomiao"},{"title":"hexo发表博客的常用命令","slug":"hexo发表博客的常用命令","date":"2021-09-12T09:57:16.000Z","updated":"2021-09-17T03:01:46.055Z","comments":true,"path":"2021/09/12/hexo发表博客的常用命令/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/12/hexo%E5%8F%91%E8%A1%A8%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"注意： 以下命令需要在本地Blog根目录下执行 1. 新建博客 hexo new \"博客的名字\" 2. 清理hexo的缓存 （ 建议每次都进行clean操作 ）hexo clean 3. 生成静态文件根据已编辑的config或markdown生成html页面 hexo g 4. 启动本地服务器（可省略这一步）将生成的网页挂载在本地主机IP的4000端口上，用于预览主题，可以在正式发布前检验页面的内容和样 式是否正确无误，默认地址： http://localhost:4000/ hexo s 5. 部署到远程站点hexo d","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hemiaomiao.github.io/tags/hexo/"}],"author":"Miaomiao"},{"title":"解决cmd输入ping和ipconfig提示不是内部或外部命令","slug":"解决cmd输入ping和ipconfig提示不是内部或外部命令","date":"2021-09-11T09:43:18.000Z","updated":"2021-09-16T16:25:59.529Z","comments":true,"path":"2021/09/11/解决cmd输入ping和ipconfig提示不是内部或外部命令/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/11/%E8%A7%A3%E5%86%B3cmd%E8%BE%93%E5%85%A5ping%E5%92%8Cipconfig%E6%8F%90%E7%A4%BA%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"方法：1.右击计算机，选择“属性”，进入控制面板之后，点击“高级系统设置”，进入“系统属性”后，点击“环境变量”按钮 2.在系统变量里面找到“Path”变量，点击“编辑”按钮 3.在Path变量末尾添加“;c:\\windows\\system32”，点击”确定”保存","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hemiaomiao.github.io/tags/hexo/"}],"author":"Miaomiao"},{"title":"加速访问github的方法","slug":"加速访问github的方法","date":"2021-09-11T09:40:04.000Z","updated":"2021-09-16T16:26:09.396Z","comments":true,"path":"2021/09/11/加速访问github的方法/","link":"","permalink":"https://hemiaomiao.github.io/2021/09/11/%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AEgithub%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"1.打开IPAddress.com网站，查询下面3个网址对应的IP地址网站传送门 github.com assets-cdn.github.com github.global.ssl.fastly.net 比如，查询github.com的IP地址 注意： 查询第四个assets-cdn.github.com网址的时候会返回4个IP地址 在cmd里面分别ping4个IP地址，选择平均时间最短的那个IP地址 （格式：ping + 一个空格 + IP地址） 这样就得到了3个网站的IP地址： 140.82.114.3 github.com 185.199.111.153 assets-cdn.github.com 199.232.69.194 github.global.ssl.fastly.net 2.修改host文件host文件路径：C:\\Windows\\System32\\drivers\\etc 先右击以管理员身份打开host文件 把刚刚查到的3个需要重定向的网址和IP地址复制到host文件的最后面 格式： IP地址 + 空格 + 网址 140.82.114.3 github.com 185.199.111.153 assets-cdn.github.com 199.232.69.194 github.global.ssl.fastly.net 3.刷新 DNS打开cmd输入以下命令刷新DNS： ipconfig /flushdns","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"github","slug":"github","permalink":"https://hemiaomiao.github.io/tags/github/"}],"author":"Miaomiao"},{"title":"计算机复试之操作系统","slug":"计算机考研复试之操作系统","date":"2020-03-10T14:16:05.000Z","updated":"2021-09-16T16:24:10.339Z","comments":true,"path":"2020/03/10/计算机考研复试之操作系统/","link":"","permalink":"https://hemiaomiao.github.io/2020/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"eg","slug":"eg","permalink":"https://hemiaomiao.github.io/tags/eg/"}],"author":"Miaomiao"},{"title":"计算机复试之数据结构","slug":"计算机考研复试之数据结构","date":"2020-03-10T14:16:04.000Z","updated":"2021-09-18T15:00:36.476Z","comments":true,"path":"2020/03/10/计算机考研复试之数据结构/","link":"","permalink":"https://hemiaomiao.github.io/2020/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"1.算法的定义算法是对问题求解步骤的描述。 2.一个好的算法应该满足什么?一个好的算法应该满足：正确性、可读性、健壮性、效率和低存储量需求 正确性：算法能够正确的解决问题 可读性：算法应该具有良好的可读性，从而帮助人们理解 健壮性：输入非法数据时，算法能够适当地做出反应，而不会产生莫名其 妙的输出结果 效率和低存储量需求：效率是指算法执行的时间，存储量需求是指算法执行过程中所需要的最大存储空间 3.算法的5个特点有穷性、确定性、可行性、输入、输出 有穷性：一个算法必须在执行有穷步之后结束，每一步在有穷时间内完成 确定性：算法中每条指令必须有确切的含义，对于相同的输入只能得到相同的输出 可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现 输入：一个算法有零个或多个输入 输出：一个算法有一个或多个输出 4.算法效率的度量通过时间复杂度和空间复杂度来描述算法的效率 5.数据结构的定义数据结构是相互之间存在一种或多种特定关系的数据元素的集合 6.数据结构三要素逻辑结构、存储结构、数据的运算 （1）数据的逻辑结构 是指数据元素之间的逻辑关系。数据的逻辑结构包括线性结构和非线性结构。 线性结构：是指数据元素之间的关系是一对一的。线性结构包括线性表、栈、队列、串、数组 非线性结构：是指数据元素之间的关系是一对多或多对多的。非线性结构包括集合、树、图。其中集合：是指数据元素之间的关系是属于同一个集合树：是指数据元素之间的关系是一对多的图：是指数据元素之间的关系是多对多的 （2）数据的存储结构：是指数据结构在计算机中的表示。存储结构包括： 顺序存储：是指逻辑上相邻的元素存储的物理地址也相邻，顺序存储要求存储单元地址必须连续。顺序存储的优点是可以实现随机存取，缺点是可能产生外部碎片 链式存储：是指逻辑上相邻的元素存储的物理地址不一定相邻，链式存储结点之间的存储单元地址可以不连续。链式存储的优点是不会出现碎片，缺点是指针占用额外的存储空间，并且不能随机存取，只能顺序存取 索引存储：是存储信息的同时，还建立附加的索引表。优点是检索速度快，缺点是索引表额外占用空间，插入和删除慢 散列存储：是根据元素的关键字直接计算出元素的存储地址。优点是检索速度快，插入和删除快，缺点是可能出现元素的存储地址冲突，解决冲突需要额外的时间和空间开销 （3）数据的运算 7.常见的数据结构：数组、链表、栈、队列、树、图 8.时间复杂度是用算法中基本运算的频度f(n)来分析算法的时间复杂度，算法时间复杂度记为T(n)=O( f(n) ) 一个语句的频度：是指该语句在算法中被重复执行的次数 算法中的基本运算是最深层循环的语句 f(n)：算法中基本运算的频度 T(n)：算法中所有语句的频度之和 算法中基本运算的频度f(n)和算法中所有语句的频度之和T(n)是相同数量级 9. O是算法中所有语句的频度之和T(n)的数量级 10.算法的空间复杂度S(n)是算法所需要的存储空间 注： 算法的空间复杂度S(n)表示算法的问题规模是n 某算法的时间复杂度是O(n^2)，说明算法的执行时间和n^2成正比，问题规模是n 11.算法原地工作是指算法所需要的辅助空间是常量O(1) 12.递归就是函数里面自己调用自己。递归是把原问题分解成和原问题相似但是规模较小的若干个子问题，这些子问题可以用相同的解题思路来解决。递归的次数必须是有限的，递归需要定义一个临界条件作为递归的出口，当符合这个递归出口的时候递归结束。递归就是一种栈的应用，递归调用是入栈，输出结果是出栈。 13.递归和循环的比较 递归的优点：是代码简洁清晰，并且容易验证正确性递归的缺点：是递归调用次数过多容易造成栈溢出 循环的优点：是速度快，结构简单循环的缺点：是不能解决所有的问题，有的问题适合使用递归而不是循环 14.排序算法的稳定性是指待排序的元素里面有两个相同的元素，经过排序之后，两个元素的前后次序没有发生改变 15.内部排序是指在排序期间元素全部存放在内存中的排序 （1）冒泡排序（稳定）：时间复杂度为O(n^2),空间复杂度为O(1) 冒泡排序的算法思想：冒泡排序就是两两比较，如果是逆序就交换位置，直到所有记录都排好序。注：每一趟冒泡排序都会有一个元素到达正确的位置，所以n个元素冒泡排序要n-1趟 （2）直接插入排序（稳定）：时间复杂度为：O(n^2)，空间复杂度为O(1) 直接插入排序的算法思想：是把第一个元素作为已经排好序的子序列，每次把一个待排序的元素按值的大小插入到已排好序的子序列里面，直到所有的待排序元素都被插入到有序序列里面为止 直接插入排序的适用范围：顺序存储和链式存储的线性表 （3）归并排序（稳定）：时间复杂度为O(nlog2n),空间复杂度为O(n) 归并排序的算法思想：是把两个有序表组合成一个新的有序表。假设有n个元素，把 n 个元素看成 n 个长度为1的有序子表，然后子表两两归并，得到长度为 2 的有序子表，然后再把子表两两归并，一直重复这个操作，直到得到1个长度为n的有序表 （4）堆排序（不稳定）：时间复杂度为O(nlog2n),空间复杂度为O(1) *堆排序的算法思想：是首先把待排序的元素建立成初始堆，然后把初始堆调整成大根堆，然后把堆顶元素和堆底元素交换，交换之后堆底元素就是待排序元素里面的最大值，输出堆底元素，然后把剩下的元素重新调整成大根堆，然后再把堆顶元素和堆底元素交换，输出堆底元素，再把剩下的元素重新调整成大根堆，一直重复这个操作，直到堆里面只剩下一个元素 注: 大根堆：结点值 ≥ 左、右孩子结点的值 （从小到大排序） 小根堆：结点值 ≤ 左、右孩子结点的值 （从大到小排序） 调整成大根堆：每次从下往上，从右往左，看结点的值是不是大于等于左右孩子结点的值，如果不满足大根堆的定义，就把这个结点和左右孩子结点的最大值交换 调整成小根堆：每次从下往上，从右往左，看结点的值是不是小于等于左右孩子结点的值，如果不满足小根堆的定义，就把这个结点和左右孩子结点的最小值交换 （5）快速排序（不稳定）：时间复杂度为O(nlog2n),空间复杂度为O（log2n） 快速排序的算法思想：快速排序的基本思想是基于分冶法，选择待排序序列里面的第一个元素作为枢轴，所有比枢轴小的元素放左边，所有比枢轴大的放右边，形成左右两个子序列，对子序列进行一样的操作，直到所有的子序列里面都只有一个元素的时候停止 （6）简单选择排序（不稳定）：时间复杂度为O(n^2),空间复杂度为O(1) 简单选择排序的算法思想：是每一趟把待排序的元素里面值最小的元素和待排序的元素里面第一个元素交换位置，需要经过n-1趟排序 （7）折半插入排序（稳定）：时间复杂度为O(n^2),空间复杂度为O(1) 折半插入排序的算法思想：是把第一个元素作为已经排好序的子序列，每次把一个待排序的元素按值的大小插入到已排好序的子序列里面，直到所有的待排序元素都被插入到有序序列里面为止。折半插入排序和直接插入排序不同的地方是，折半插入排序是用折半查找的方法在有序子序列里面查找待排序的元素应该被插入的位置 折半插入排序的适用范围：顺序存储的线性表 （8）希尔排序（不稳定）：空间复杂度为O(1) 希尔排序的算法思想：是把待排序序列按相隔某个增量分割成若干个子序列，对各个子序列分别进行直接插入排序，逐渐缩小增量，重复上述步骤，直到序列基本有序，再对全体记录进行一次直接插入排序 希尔排序的适用范围：顺序存储的线性表 希尔排序的增量的选择：第一趟的增量是待排序元素个数的一半 n/2 ，第二趟的增量是第一趟增量的一半向下取整，一直到最后一趟增量是1 （9）基数排序（稳定）：时间复杂度为O(d(n+r)),空间复杂度为O(r)（ r是队列数量 ） 基数排序的算法思想：基数排序不需要比较和移动。基数排序是首先设置编号为0~9的十个桶，把待排序的元素先按照个位进行分配，然后收集，再按照十位进行分配，然后收集，然后按照百位进行分配，然后收集，依次类推，直到最后按照最高位进行分配，然后收集，整个排序结束 注: 快速排序是内部排序算法里面平均性能最好的排序算法 不稳定排序：堆排序、希尔排序、快速排序、简单选择排序 （口诀：堆希快简） 稳定排序：冒泡排序、直接插入排序、基数排序、归并排序、折半插入排序 （口诀：冒直基归折） 16.顺序查找： 顺序查找的思想：是把要查找的值依次和线性表中的元素进行比较。 顺序查找的优点是对数据的存储方式没有要求，顺序存储和链式存储都可以。顺序查找的缺点是效率低 17.二分查找（折半查找）：时间复杂度是O(log2n) 二分查找的思想：首先把要查找的值和中间位置mid处的元素进行比较，如果相等，说明查找成功，返回该元素的位置，如果要查找的值小于中间位置mid处的元素，就往mid的左边找，high=mid-1，重新计算mid的值，如果要查找的值大于中间位置mid处的元素，就往mid的右边找，low=mid+1，重新计算mid的值，然后再把要查找的值和中间位置mid处的元素进行比较，重复上面的操作，直到查找成功或者确定表里面没有要查找的元素，查找失败 二分查找的优点是比顺序查找的效率高，二分查找的缺点是只适用于有序的顺序表 18.分块查找是把查找表分成若干个子块，块与块之间是有序的，再建立一个索引表，索引表里面的每个元素含有各块的最大关键字和各块第一个元素的地址。第一步是确定待查找元素在索引表里面所在的块，第二步是在块内顺序查找 19.矩阵的压缩存储是针对像对称矩阵、三角矩阵、稀疏矩阵这样的特殊矩阵，矩阵里面的相同元素只存储一个，从而达到节省存储空间的目的 20.面向对象编程和面向过程编程的比较 面向过程就是分析出解决问题的步骤，然后用函数把这些步骤一步一步实现，使用的时候依次调用函数就可以了。 面向对象是把构成问题的事物抽象成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在解决问题的步骤里面的行为。就拿小明上学这件事情举例：面向过程：孩子起床→孩子洗漱→孩子出门→孩子去学校，面向对象：孩子{起床、洗漱、出门、去学校} 面向过程的性能比面向对象高，但是面向对象容易维护、容易复用、容易扩展。面向对象有封装、继承、多态的特征。 注: 1.对象：是描述客观事物的实体 2.类：具有相同属性和行为的对象的集合，类里面定义属性和行为。 封装：将类的某些信息隐藏在类的内部，只能通过该类提供的公共方法来对隐藏的信息进行操作和访问。一般是把属性限制为private私有，封装在一个类里面， 对每个私有属性提供public公共的setter和getter方法 继承：子类通过extends关键字可以继承父类的所有非私有属性和方法 多态：同一个行为具有多个不同的表现形式 重载：在同一个类里面方法的名称相同，但是参数类型或者参数个数不同 重写：子类继承父类的时候重写了父类的方法，在子类里面定义了和父类方法名称、参数类型、返回值类型一样的方法 21.线性表是由n个相同数据类型的数据元素构成的有限序列。线性表分为顺序表和链表。线性表除了第一个元素，每个元素都有一个直接前驱，除了最后一个元素，每个元素都有一个直接后继 22.顺序表和链表的比较顺序表：线性表的顺序存储 链表：线性表的链式存储 顺序表可以随机存取，链表只能顺序存取，不能随机存取 顺序表插入和删除需要移动大量的元素，链表插入和删除操作不需要移动元素，只需要修改指针 顺序表的存储单元地址必须连续，链表的存储单元地址可以不连续 顺序表的存储空间是一次性分配的，链表的存储空间是多次分配的，需要的时候申请就可以了 23.头指针和头结点的区别头指针是指向链表的第一个结点，头结点是放在第一个元素结点之前，头结点的数据域通常不存储信息。如果有头结点，那么头指针指向头结点，如果没有头结点，那么头指针指向第一个元素结点。 24.增加头结点的优点： 有了头结点，链表的第一个元素结点的插入和删除操作就和其它位置的结点一样了，不需要特殊处理 有了头结点，无论链表是不是为空链表，头指针都指向头结点，所以空表和非空表的处理得到了统一 25.循环单链表是链表中最后一个结点的指针域不是空，而是指向头结点 26.循环单链表的优点是可以从链表的任何一个结点开始遍历整个链表 27.双链表是链表的每个结点有两个指针域，分别指向前驱结点和后继结点 28.双链表的优点是可以方便地找到前驱结点 29.静态链表静态链表的指针表示的是下一个元素在数组中的位置 30.栈和队列的区别 栈和队列有相同的逻辑结构，都是线性结构，栈和队列都是操作受限的线性表 栈和队列都可以采用顺序存储和链式存储 栈是先进后出，在栈顶插入和删除元素，有栈顶指针top。队列是先进先出，在队尾插入元素，队头删除元素，有队头指针front和队尾指针rear 注: 队列插入元素是入队，删除元素是出队，所以队列在队尾入队，队头出队 队列删除元素（出队）修改队头指针front，插入元素（入队）修改队尾指针 rear 31.共享栈是利用栈底位置相对不变的特性，可以让两个顺序栈共享一个一维数组空间，将两个栈的栈底设在共享空间的两端，两个栈顶向共享空间的中间延伸，这样能够更有效的利用存储空间 32.顺序队列 判断顺序队列队空：队头指针=队尾指针=0 顺序队列入队（插入元素）：队尾指针加1 顺序队列出队（删除元素）：队头指针加1 33.循环队列是把存储队列元素的表看成一个环，采用牺牲一个单元来区分队空和队满 注：% 是取余数 判断循环队列队空：队头指针 = 队尾指针 判断循环队列队满：队头指针 =（队尾指针 + 1）% 数组的容量 判断循环队列中的元素个数：(队尾指针-队头指针+数组的容量)%数组的容量 循环队列入队（插入元素）：队尾指针 =（队尾指针 + 1） % 数组的容量 循环队列出队（删除元素）：队头指针 =（队头指针 + 1） % 数组的容量 34.双端队列两端都可以进行入队和出队操作的队列 35.队列的应用层次遍历、缓冲区、页面替换算法 36.栈的应用括号匹配、递归、表达式求值 37.栈在括号匹配中的算法思想 出现左括号，都进栈； 出现右括号，和栈顶元素比较，如果括号匹配，就把栈顶元素出栈，如果括号不匹配，就返回不匹配信息直接结束程序 算法结束的时候，如果栈空，就说明括号匹配 38.栈在后缀表达式求值的算法思想顺序扫描表达式的每一项，如果该项是操作数，就入栈，若该项是操作符，则连续从栈中退出两个操作数Y和X，形成运算指令X操作符Y，并将计算结果重新压入栈中。当表达式的所有项都扫描并处理后，栈顶存放的就是最后的计算结果。 39.空串空串长度是0 40.空格串空格串长度是空格字符的个数 41.KMP算法思想从主串和模式串的第一个字符开始比较，当出现字符不匹配的时候，模式串向右移动的位数等于已匹配字符数-模式串对应的部分匹配 注: 部分匹配值是字符串的前缀和后缀的最长相等前后缀长度 42.散列函数一个把查找表中关键字映射成为该关键字对应的地址的函数 43.散列表（哈希hash表）根据关键字而直接进行访问的数据结构，散列表建立了关键字和存储地址之间的一种直接映射关系 44.散列函数（哈希hash函数）的构造方法 直接定址法：直接取关键字的某个线性函数值作为散列地址 除留余数法：取一个不大于但是最接近散列表表长的质数p，利用公式把关键字转换成散列地址（公式：H(key) = key % p ） 数字分析法：设关键字是r进制数，选取数码分布比较均匀的若干位作为散列地址 平方取中法：选择关键字的平方值的中间几位作为散列地址 45.解决哈希（hash）冲突的方法 线性探测法：是发生冲突的时候，顺序地查看表中下一个单元，直到找到一个空闲单元或者查遍全表。线性探测的缺点是可能会造成大量元素在相邻的散列地址上堆积，降低了查找效率 链地址法（拉链法）：是发生冲突的时候，把具有相同散列地址的关键字存放到同一个单链表里面 平方探测法：是发生冲突的时候，探测地址的增量序列是1^2、-1^2、2^2、-2^2，……k^2，-k^2，直到找到一个空闲单元或者查遍全表。平方探测法的优点是可以避免出现元素堆积，缺点是不能探测到散列表上的所有单元 再散列法：是发生冲突的时候，使用另外一个散列函数 伪随机序列法 注: 散列表查找成功的平均查找长度 = 所有关键字成功找到的比较次数之和 / 关键字个数 46.散列表的装填因子α是表示一个表的装满程度。 装填因子α = 关键字个数 / 散列表的长度 47.散列表的查找效率的取决因素散列函数、处理冲突的方法、装填因子 48.结点的度是该结点的孩子结点的个数 49.树的度是树里面结点的最大度数 50.树的存储结构双亲表示法、孩子表示法、孩子兄弟表示法 51.二叉树是指树里面的结点最多有两个孩子结点 52.满二叉树是指除了最后一层的叶子结点，其它层的每个结点都有两个孩子结点的二叉树 53.完全二叉树是指最后一层缺最右边的一些叶子结点，其它层的每个结点都有两个孩子结点的二叉树 54.二叉排序树 二叉树的定义：二叉排序树左子树的结点值 &lt; 根结点值 &lt; 右子树的结点值 二叉排序树的插入步骤：如果二叉排序树是空树，就把关键字当作根结点插入到空树里面，如果二叉排序树不是空树，如果关键字的值小于当前根结点的值，就把关键字插入到左子树，如果关键字的值大于当前根节点的值，就把关键字插入到右子树 55.线索二叉树是把二叉链表中的空指针改成指向前驱结点或者后继结点的线索 56.平衡二叉树是所有结点的左子树和右子树高度差的绝对值小于等于1的二叉树 57.平衡因子结点左子树和右子树的高度差 58.哈夫曼树是带权路径长度最小的二叉树 59.构造哈夫曼树的步骤把给定的权集里面的每个结点看成只有一个结点的二叉树，构成森林。每次从森林里面选择两棵根节点权值最小的二叉树构成新的二叉树，新的二叉树的根节点的权值是左、右子树的根节点的权值之和，从森林里面删除刚刚被选择的两棵二叉树，同时将新的二叉树加入到森林里面，重复上面的步骤，直到森林里面只剩下一棵树为止 60.哈夫曼编码统计每个字符出现的次数作为字符的权值，构造出哈夫曼树，从根节点出发，左分支是0，右分支是1 61.连通图是指无向图里面任意两个顶点之间都是连通的 62.图的存储结构邻接矩阵法、邻接表法、十字链表法、邻接多重表法 63.邻接矩阵与邻接表的比较邻接矩阵是用二维数组存储各顶点之间的邻接关系，邻接表是图中每个顶点建立一个单链表，单链表的结点是和该顶点有邻接关系的顶点。对于稀疏图，邻接表比邻接矩阵节省存储空间 64.深度优先搜索是首先访问图里面的一个起始顶点，然后访问和该起始顶点邻接但是没有被访问过的任意一个顶点，然后再访问和这个顶点邻接但是没有被访问过的任意一个顶点，重复上面的过程，直到一个顶点所有的邻接顶点都被访问过，然后依次退回到最近被访问的顶点，如果该顶点还有邻接顶点没有被访问过，就从这个顶点开始重复上面的过程，直到所有顶点都被访问过为止 65.广度优先搜索是首先访问图里面的一个起始顶点，然后访问和该起始顶点邻接但是没有被访问过的所有顶点，再按这些邻接顶点的先后次序依次访问和它邻接但是没有被访问过的所有顶点，重复这个过程，直到所有顶点都被访问过为止 66.最小生成树是包含图中所有的顶点，含有最少的边，并且不能有回路 67.普里姆Prim算法构造最小生成树（针对顶点）从图中任选一个顶点加入到集合里面，从和集合里面的顶点相连的边里面选择权值最小的边，把这条边的顶点加入到集合里面，重复上面的过程，直到所有的顶点都加入集合为止。 普里姆算法的时间复杂度是O(N^2) 68.克鲁斯卡尔Kruskal算法构造最小生成树（针对边）每次从没有被选择的边里面选择权值最小并且不构成回路的边，把这条边加入生成树里面，重复这个过程，直到所有的顶点都加入到生成树里面为止。 克鲁斯卡尔算法的时间复杂度是O（ElogE） E：是边数 注: 克鲁斯卡尔Kruskal算法适合边少但是顶点多的图 69.最短路径是指从一个顶点到图中任意一个顶点的路径所经过的边的权值之和最小的路径 70.迪杰斯特拉Dijkstra算法求最短路径 迪杰斯特拉算法是求单源最短路径。 迪杰斯特拉的算法思想： 首先把起始顶点加入到集合里面，更新起始顶点到其它各个顶点的距离，找到距离最小的路径，然后把这个路径的顶点加入到集合里面，然后把这个顶点作为中心，看起始顶点到其它各个顶点的距离是不是比原来小，如果小的话就更新，然后找到距离最小的路径，把这个路径的顶点加入到集合里面，重复上面的步骤，直到所有的顶点都加入到集合里面。 迪杰斯特拉算法要求边的权值不能是负值，时间复杂度是O(n^2) 71.弗洛伊德Floyd算法是求最短路径 弗洛伊德Floyd算法是求任意顶点之间的最短路径 弗洛伊德Floyd算法里面边的权值可以是负值，时间复杂度是O(n^3) 72.拓扑排序是从AOV网中选择一个没有前驱的顶点，输出该顶点，然后删除该顶点和以该顶点为起点的所有边，重复上面的过程，直到当前的AOV网为空或者当前AOV网不存在没有前驱的顶点为止 73.关键路径是AOE网里面从源点到汇点的路径长度最大的路径 74.AOV网与AOE网的区别AOV网的顶点表示活动，有向边表示活动之间的前后关系，AOV网的边没有权值。AOE网的顶点表示事件，有向边表示活动，边上的权值表示完成活动的开销。AOV网和AOE网都是有向无环图，但是它们的边和顶点代表的意思不一样。 75.贪心算法、动态规划、分治法的比较 贪心算法：是每次都选择当前状态下最好的选择，也就是局部的最优解，而不考虑这个局部最优解对全局的影响。贪心算法是自顶向下的方式进行，例如迪杰斯特拉Dijkstra算法采用了贪心算法 动态规划：是把原问题分解成若干个有重叠的子问题，保存已经解决的子问题的结果防止后面重复计算。动态规划算法是自底向上的方式进行。动态规划分为背包问题（01背包、完全背包、多重背包）、区间dp 分治法：是把原问题分解成若干个独立的子问题，递归地解决这些子问题，然后再合并子问题的解从而得到原问题的解。例如归并排序 76.程序设计语言的发展历史，每一类的特点 机器语言：是计算机能够直接识别的二进制代码的集合。机器语言难学难写 汇编语言：是把符号语言的指令转换为机器指令。汇编语言不能通用 面向过程：是分析出解决问题的步骤，然后用函数把这些步骤实现，使用的时候依次调用函数就可以了 面向对象：是把客观存在的事物抽象成对象，用对象去描述事物的行为。 注: 面向过程的性能比面向对象高，但是面向对象容易维护、容易复用。 面向对象有封装、继承、多态的特征 77.函数调用传参的方式有值传递和地址传递 值传递：是把变量、常量、数组元素作为函数参数，形参值的变化不会影响到实参 地址传递：是把数组名或者指针作为函数参数，形参值的变化就是实参的变化 78.函数调用的返回方法用return返回函数的值，返回值的类型根据函数类型决定，如果没有返回值，函数就要定义成void类型 79.有哪些控制结构有顺序结构、选择结构（if、switch）、循环结构（while型循环、util型循环） 80.一维数组和顺序表的异同顺序表和数组都可以随机存取，插入和和删除都要移动大量的元素，顺序表的位序从1开始，数组下标从0开始 81.带头结点的单链表删除数据为x的元素定义两个指针变量，一个指针变量pre指向头结点，一个指针变量p指向第一个元素结点，指针一个指针变量指向头结点，另一个指针变量指向第一个元素结点，开始，依次比较每个结点的值，如果等于数据x，就把这个结点的 82.顺序表、单链表怎么插入元素 顺序表插入元素：在第i个位置插入元素，首先判断i是不是合法，如果i合法，把第i个元素和第i个元素后面的所有元素右移一个位置，然后把元素插入到第i个空位置 单链表插入元素：先检查插入位置的合法性，然后找到待插入位置的前驱结点，然后让新结点就指向了这个前驱结点的后继结点，前驱结点指向新结点 83.顺序结构怎么存储二叉树是用一组连续的存储单元从上往下、从左往右存储二叉树的结点。 注: 链式存储是结点里面有数据域，左指针域，右指针域 84.怎么找前K个最大元素先把元素用快速排序进行排序，然后取出前K个元素，时间复杂度是O（NlogN) 85.如何判断哈希函数的优劣哈希函数计算出来的存储地址应该能等概率、均匀地分布在整个地址空间里面，从而减少冲突的发生，哈希函数应该尽量简单，能够在较短时间内计算出关键字的存储地址 86.KMP算法和朴素算法的比较 朴素算法：从主串和模式串的第一个字符开始比较，当出现字符不匹配的时候，把模式串向右移动一位然后从头开始比较。时间复杂度O（m*n） KMP算法思想：从主串和模式串的第一个字符开始比较，当出现字符不匹配的时候，模式串向右移动的位数等于已匹配字符数-模式串对应的部分匹配值。时间复杂度是O（m+n） 注: 部分匹配值：是前缀和后缀的最长相等长度 87.n！怎么算第一种方法是用循环求阶乘，设循环变量i为从 1 变化到 n，变量sum的初始值定义为1，循环里面让循环变量i和 sum 相乘，把结果赋给 sum 第二种方法是用递归求阶乘，递归出口是n等于1的时候直接返回1，结束递归 88.阶乘较大数据溢出怎么处理用数组来保存阶乘的结果，每个位置存放1个数字，数组的第一个位置存放个位，第二个位置存放十位，依次类推 89.二维矩阵相乘需要几层循环需要三层循环，第一层循环控制左边矩阵的行，第二层循环控制右边矩阵的列，第三层循环控制左边矩阵的列，也是右边矩阵的行，比如说前2层循环确定了是左边矩阵第一行和右边矩阵第一列，那么第三层循环就是让左边第一行第一列的元素和右边第一行第一列元素相乘，然后加上左边第一行第二列的元素和右边第二行第一列的元素相乘，依次类推","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"考研复试","slug":"考研复试","permalink":"https://hemiaomiao.github.io/tags/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"},{"name":"数据结构","slug":"数据结构","permalink":"https://hemiaomiao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"author":"Miaomiao"},{"title":"计算机复试之数据库","slug":"计算机考研复试之数据库","date":"2020-03-10T14:16:03.000Z","updated":"2021-09-18T15:06:57.328Z","comments":true,"path":"2020/03/10/计算机考研复试之数据库/","link":"","permalink":"https://hemiaomiao.github.io/2020/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"1.数据(Data)是数据库中存储的基本对象 2.数据库DB（Database）是长期储存在计算机内、有组织的、可共享的大量数据的集合 3.数据库（DB）的基本特征 数据按一定的数据模型组织、描述和储存 可为各种用户共享 冗余度较小 数据独立性较高 易扩展 4.数据库（DB）的作用 实现数据共享、减少数据的冗余 保证数据一致性和可维护性 实现数据的集中控制、故障恢复 实现数据的独立性 5.数据库管理系统DBMS（Database Management System）是位于用户和操作系统之间的一层存储和管理数据库的软件，是数据库系统的核心 6.数据库管理系统(DBMS)的作用科学地组织和存储数据、高效地获取和维护数据 7.数据库管理系统(DBMS)的功能 数据定义功能 数据组织、存储和管理功能 数据操纵功能 数据库的事务管理和运行管理功能 8.数据库系统DBS（Database System）在计算机系统中引入数据库后的系统构成。数据库系统是由数据库、数据库管理系统、应用系统、数据库管理员组成 9.数据库系统(DBS)的构成 数据库（DB） 数据库管理系统（DBMS） 应用系统 数据库管理员（DBA） 10.数据管理对数据进行分类、组织、编码、存储、检索和维护 11.数据库系统（DBS）的特点 数据结构化 数据的共享性高，冗余度低，易扩充 数据独立性高 数据由数据库管理系统（DBMS）统一管理和控制 12.数据共享的好处 减少数据冗余，节约存储空间 使系统易于扩充 13.数据库管理系统（DBMS）提供的数据控制功能 数据的安全性保护 数据的完整性检查 并发控制 数据库恢复 14.数据库管理员DBA（Database Administrator）对数据库进行规划、设计、协调、维护和管理等工作的人员 15.数据库管理员（DBA）的职责 决定数据库中的信息内容 决定数据库的存储结构 定义数据的安全性要求和完整性约束条件 16.数据独立性应用程序与数据库中数据的物理存储和数据的逻辑结构之间是相互独立的，数据独立性是由数据库管理系统的二级映像功能来保证的 物理独立性: 指应用程序和数据库中数据的物理存储是相互独立的。当数据的物理存储改变了，应用程序不受影响 逻辑独立性: 指应用程序和数据库中数据的逻辑结构是相互独立的。当数据的逻辑结构改变了，应用程序不受影响 17.现实世界中客观对象的抽象过程现实世界中的客观对象抽象为概念模型，再把概念模型转换为逻辑模型，最后把逻辑模型转化为物理模型 18.数据模型（Data model）是描述数据的一组概念和定义 19.数据模型的分类 概念模型：是按用户的观点来对数据建模 逻辑模型：是按计算机系统的观点对数据建模 物理模型：描述数据在系统内部的表示方式，在磁盘上的存储方式 20.常用的数据模型 层次数据模型 网状数据模型 关系数据模型 面向对象模型 对象关系模型 21.数据模型的组成要素 数据结构 数据操作 完整性约束条件 22.实体（Entity）实体是客观存在并可以相互区别的事物 23.属性（Attribute）实体所具有的某一特性称为属性。一个实体可以由若干个属性来刻画 24.码（Key）码是唯一标识实体的属性集 25.实体之间的联系一对一（1:1）、一对多（1：n）、多对多（n：m） 26.E-R图有三个组成部分实体、属性、联系 实体：用矩形表示，矩形框内写实体名 属性：用椭圆表示，并用无向边将其与相应的实体连接起来 联系：用菱形表示，菱形框内写联系名，并用无向边分别与有关实体连接起来，同时在无向边旁标上联系的类型。如果一个联系具有属性，则这些属性也要用无向边与该联系连接起来 27.层次数据模型因为现实世界中很多事物之间本身就存在层次关系，所以用树形结构来表示实体和实体间的联系，层次数据模型只能直接处理一对多的实体联系 28.网状数据模型网状模型能处理多对多的实体联系 29.关系数据模型关系数据模型中将实体和实体之间的联系全部用表来表示，关系数据模型中数据的逻辑结构是一张表，一个关系就是一张表，它由行和列组成，关系数据模型中的一行是一个元组，一列是一个属性 30.关系数据模型的数据结构 关系：实体和实体之间的各种联系都是用关系来表示，一个关系对应一张二维表，表的每行对应一个元组，表的每列对应一个域。表示格式：关系名（属性1，属性2，…，属性n） 元组：表中的一行就是一个元组 属性：表中的一列就是一个属性 主码：表中的某个属性组，它可以唯一确定一个元组 域：是一组具有相同数据类型的值的集合，是属性的取值范围 分量：元组中的一个属性值 关系模式：对关系的描述。表示格式：关系名（所有属性名，属性来自的域，属性和域的映射，属性间的依赖关系） 关系必须是规范化的，最基本的规范条件是：关系的每一个分量必须是一个不可分的数据项, 不允许表中还有表 31.关系模式和关系的区别关系是关系模式在某一时刻的状态，关系是不断变化的，关系模式是对关系的描述，是稳定的 32.关系数据模型的完整性约束条件 / 数据库的完整性 实体完整性：主键不能为空，主键必须唯一，不能重复 参照完整性：外键为空或者外键等于被参照关系（被参照表）中的主键值（实体完整性和参照完整性是关系的两个不变性） 用户定义的完整性：是针对数据库中数据的约束条件,给属性值约定范围 33.关系数据模型的优点 实体和各类联系都用关系来表示 具有更高的数据独立性，更好的安全保密性 简化了程序员的工作和数据库开发建立的工作 34.模式是数据库逻辑结构和特征的描述，模式是相对稳定的 35.实例是模式的一个具体值，实例是不断变化的 36.数据库系统的三级模式结构 模式（又叫逻辑模式）： 是数据库中所有数据的逻辑结构和特征的描述，是所有用户的公共数据视图。一个数据库只有一个模式，模式是数据库系统的模式结构的中间层。 外模式（又叫用户模式）：是数据库用户使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图。模式和外模式是一对多的关系，一个外模式可以被多个应用程序所使用，一个应用程序只能使用一个外模式。 内模式（又叫存储模式）： 是数据物理结构和存储方式的描述，一个数据库只有一个内模式 37.数据库的二级映像功能 外模式／模式映像 : 对于每一个外模式，有一个外模式／模式映像，保证了数据的逻辑独立性。当模式改变时，数据库管理员对外模式／模式映像作相应改变，使外模式保持不变。 模式／内模式映像 : 模式／内模式映象定义了数据全局逻辑结构与存储结构之间的对应关系。数据库中模式／内模式映像是唯一的，保证了数据的物理独立性。当数据库的存储结构改变了，数据库管理员对模式／内模式映像作相应改变，使模式保持不变。 38.关系数据库 定义： 是所有实体和实体之间联系的关系的集合 关系数据库的优点: 是使用方便，易于维护，降低了数据冗余和数据不一致的概率，支持SQL和事务 关系数据库的缺点: 是读写性能比较差 40.关系代数的5种基本操作 （每个元组就是一行，每个属性就是一列） 选择σ：从一个表中把满足条件的元组找出来 投影π：选择出若干属性列组成新的关系，投影要去掉重复元组（行） 笛卡尔积：笛卡尔积就是把两个关系的元组进行拼接，包含了两个关系的所有元组的各种可能的组合。比如现在有两个关系，关系R有2个元组，关系S有3个元组，笛卡尔积就是拿关系R的第一个元组去跟关系S的三个元组分别进行拼接，再拿关系R的第二个元组去跟关系S的三个元组分别进行拼接，一共得到6个元组 差：元组属于关系R但不属于关系S 并：元组来自关系R或者关系S，并起来的关系不允许有重复行 41.关系代数的其它操作 交：元组既属于关系R又属于关系S 连接：是从两个关系的笛卡尔乘积中选择满足一定条件的元组。如果没有条件限制，连接就是笛卡尔乘积 注: 等值连接 equal join：是从两个关系的笛卡尔乘积中选择属性值相等的元组（两个表中列值相等的）。格式如下：select *from 表1，表2where 表1.列名 = 表2.列名 自然连接 natural join：自然连接是一种特殊的等值连接，自然连接是从两个关系的笛卡尔乘积中选择相同的属性里面属性值相等的元组（两个表中相同的列里面值相等的），并且要去掉结果中的重复列 内连接inner join：内连接包括等值连接和不等值连接。格式如下：select *from 表1inner join 表2on 表1.列名 = 表2.列名 外连接 ：外连接包括左连接和右连接 左连接（左外连接）left join：两个关系作自然连接，但是左边关系中的所有元组保留下来，右边关系中不符合条件要舍弃的元组填空值 右连接（右外连接）right join：两个关系作自然连接，但是把右边关系中的所有元组保留下来，左边关系中不符合条件要舍弃的元组填空值 42.SQL的功能（1）数据操纵：插入insert、删除delete、更新update 插入数据： insert into 表名（属性1，属性2，......） values(属性1的值，属性1的值，......); 删除数据： delete from 表名 where + 条件 更新数据： update 表名 set属性 = 修改的值 where + 条件 （2）数据查询 select [distinct] 所查询的内容 （distinct是去掉重复行） from 表名 where + 条件 group by 列名 having 条件 order by 列名 asc（升序）/desc（降序） 43.基本表基本表是实际存在的表，基本表的数据存储在数据库中，在SQL中一个关系就对应一个基本表 44.虚表虚表的数据不是存储在数据库中，虚表在数据库里面只存储定义 45.视图是由基本表构成的虚表，数据库里面只存储视图的定义，不存储视图对应的数据，视图对应的数据存放在基本表中。所以基本表里面的数据发生变化，从视图中查询的数据也随之改变 46.视图的作用 视图能够简化用户的操作 视图使用户能以多种角度看待同一数据 视图对重构数据库提供了一定程度的逻辑独立性 视图能够对机密数据提供安全保护 适当的利用视图可以更清晰的表达查询 47.码包括候选码和主码 48.候选码（候选键）如果关系中的某个属性组合的值能唯一地标识一个元组，那么这个属性组合就是候选键。换句话说，当一个属性组合能够推出关系中所有的属性，但是这个属性组合的任何一个真子集不能推出所有的属性，则这个属性组合是候选键。候选键不是唯一的 49.主码（主键）从候选键中选择一个作为主键。主键是唯一的，不能重复，并且主键不能为空 50.外码（外键）这个属性不是自身关系的主键，而是另一个关系的主键，则这个属性是外键 51.主属性包含在候选键里面的属性就是主属性 52.非主属性不包含在候选键里面的属性就是非主属性，去掉主属性剩下的属性都是非主属性 53.函数依赖在属性X能推出属性Y，那么就说Y函数依赖于X，写作X → Y 54.完全函数依赖属性X能推出属性Y，但是属性X的任何一个真子集不能推出属性Y，那么就说Y对X是完全函数依赖 55.部分函数依赖属性X能推出属性Y，属性X的真子集能推出属性Y，那么就说Y对X是部分函数依赖 56.传递函数依赖属性X能推出属性Y，属性Y能推出属性Z，那么就说Z对X是传递函数依赖 57.引入的范式的原因 数据冗余 更新异常 插入异常 删除异常 58.范式是我们在设计数据库结构过程中所要遵循的规则和指导方法 59.第一范式(1NF)关系模式的每一个属性都是不可再分的，换句话说就是二维表的每一列都是不可再分的，不允许表中套表 60.第二范式(2NF)关系模式首先要满足第一范式，并且不存在非主属性对候选键的部分函数依赖 例1. 候选键AB可以推出非主属性C，主属性A可以推出非主属性C，则非主属性C对候选键AB是部分函数依赖 例2. 候选键AB可以推出非主属性C，主属性A推不出来非主属性C或者主属性B推不出来非主属性C，则非主属性C对候选键AB是完全函数依赖 61.第三范式(3NF)关系模式首先要满足第二范式，并且不存在非主属性对候选键的传递函数依赖 例如：候选键AB可以推出非主属性D，非主属性D可以推出非主属性C，则非主属性C对候选键AB是传递函数依赖 62.BC范式(BCNF)关系模式首先要满足第三范式，并且不存在主属性对候选键的传递函数依赖和部分函数依赖 63.判断范式的步骤 第一步：求闭包，就是对左边属性进行一个组合，使得左边属性组合能够推出所有属性 第二步：找出候选键，左边属性组合就是候选键 第三步：找出主属性和非主属性，包含在候选键里面的属性就是主属性，不包含在候选键里面的属性就是非主属性 第四步：根据范式定义去判断 64.索引是对数据库的表里面一列或多列的值进行排序的一种结构。索引的优点是提高查询速度，索引的缺点是索引会占用物理存储空间，并且索引需要动态维护。 65.索引的类型 B+树索引（优点是动态平衡） hash索引（优点是查找速度快） 聚集索引：物理存储顺序与逻辑顺序相同 非聚集索引 唯一索引 66.游标是系统为用户开设的一个数据缓冲区，存放SQL语句的执行结果 67.存储过程是由PL/SQL语句写的过程，经过编译和优化后存储在数据库服务器中。存储过程使用时只要调用就可以了，运行效率高。 68.触发器是用户定义在关系表上的一类由事件驱动的特殊的存储过程，当用户对表进行insert插入、delete删除、update更新的操作时，服务器会自动激活相应的触发器，触发器可以用来防止对数据的不正确修改。 69.触发器的类型 行级触发器 语句级触发器 70.触发器的工作原理触发器触发的时候，系统会自动在内存中创建deleted表或者inserted表，deleted表和inserted表只允许读，在触发器执行完成后，会自动删除，inserted表临时保存了插入或者更新后的记录行，deleted表临时保存了删除或者更新前的记录行。 注: 更新隐含的操作：删掉原来的再插入新的，原来的放在deleted表，插入的新的放在inserted表 71.事务是用户定义的一个数据库操作序列，这些操作要么全部做，要么全部不做，事务是一个不可分割的工作单位，事务是恢复和并发控制的基本单位。事务通常以begin transaction开始，以commit或者rollback结束。 注: commit表示提交事务的所有操作，具体来说就是将事务中所有对数据库的更新写回到磁盘上的物理数据库中，事务正常结束 rollback表示回滚，就是说在事务运行的过程中发生了某种故障，事务不能继续执行，系统将事务中对数据库的所有已经完成的更新操作全部撤销，回滚到事务开始时的状态 72.事务的特性事务有四个特性，简称为ACID特性，分别是： 原子性：事务是数据库的逻辑工作单位，事务中包括的操作要么都做，要么都不做。 一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。一致性状态是指数据库中只包含成功事务提交的结果。 隔离性：一个事务的执行不能被其他事务干扰，也就是说一个事务内部的操作和使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能相互干扰 永久性：指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的，接下来的其他操作或故障不应该对其执行结果有任何影响。 73.事务并发执行的目的 改善系统的资源利用率和吞吐率 改善短事务的响应时间 74.需要对事务并发执行进行并发控制的原因为了保证事务的一致性和隔离性 75.如果没有并发控制对事务的并发操作进行正确的调度，可能会产生如下问题并发一致性问题： 丢失修改：是两个事务对同一数据并发的写入所引起的 读脏数据：是一个事务读取另一个事务修改了但没有提交的数据所引起的 不可重复读：是一个事务读取数据之后，另一个事务修改了数据，如果此时第一个事务再次读取数据，两次读取的结果可能不一样 76.数据库的隔离级别 未提交读：一个事务可以看到其他未提交的事务的数据 提交读：一个事务只能读取已经提交的事务的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的 可重复读：保证同一个事务多次读取同一数据的结果是一样的 可串行化：强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。这种隔离级别需要加锁实现，因为要使用加锁机制保证同一时间只有一个事务执行。 77.数据库中的死锁事务1等待事务2释放锁，事务2等待事务1释放锁，事务之间出现了循环等待的情况，如果不进行干预，会一直等待下去形成死锁 78.数据库中死锁的预防 一次封锁法：要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行 顺序封锁法：预先对数据规定一个封锁顺序，所有事务都按这个顺序实行封锁 79.数据库中死锁的检测 超时法：如果一个事务的等待时间超过了规定的时间就认为发生了死锁 等待图法：如果有向图出现了回路，说明发生了死锁 80.封锁是事务在对某个数据操作之前，先向系统发出请求，对数据加锁，加锁后事务对该数据有了一定的控制，在事务释放数据上的锁之前，其他的事务不能更新此数据，封锁是实现并发控制的一个非常重要的技术。 81.封锁的类型 排它锁（又称为写锁）：是只允许当前事务读取和修改数据，在当前事务释放数据上的排它锁之前，其他事务不能再读取和修改数据 共享锁（又称为读锁）：是当前事务只能读取数据但不能修改数据，其他事务也可以读取数据，但是在当前事务释放数据上的共享锁之前，其他事务不能修改数据 82.封锁协议对数据加锁需要约定一些规则，例如何时申请封锁，何时释放封锁 83.两段封锁协议是指每个事务必须分为两个阶段，第一个阶段是加锁，第二个阶段是解锁 84.数据库的完整性数据库的完整性是指数据的正确性和相容性，数据库的完整性是为了防止数据库中存在不正确的数据。数据库的完整性的防范对象是不正确的数据，防止他们进入数据库。 85.数据库的安全性是保护数据库防止恶意的破坏和非法的存取。数据库的安全性的防范对象是非法用户和非法操作，防止他们对数据库数据的非法存取。 86.varchar(n)和char(n)的区别varchar存储的字符串长度是可变的，最大长度为n，char存储的字符串长度是固定的n 87.drop和delete的区别drop是直接删除这张表，delete是删除表中的数据，并且可以通过commit提交或者rollback回滚 88.关系模式和关系的区别关系是关系模式在某一时刻的状态，关系是不断变化的，关系模式是对关系的描述，是稳定的 89.数据冗余同一信息在数据库中存储了多个副本 90.恢复中最经常使用的技术（建立冗余数据最常用的技术） 数据库转储 登记日志文件 91.恢复的基本原理系统发生故障的时候，利用数据库中的后备副本和日志文件，以及数据库镜像中的冗余数据来重建数据库。 92.JDBC是java程序连接数据库服务器的应用程序接口 93.常见的数据库MySQL&nbsp;、SQL Server、Oracle 94.数据字典是各类数据描述的集合，数据字典包括数据项、数据结构、数据流、数据存储、处理过程 95.数据项不可再分的数据单位 96.数据库设计的步骤需求分析、概念设计、逻辑设计、物理设计、数据库实施、数据库运行和维护 97.常见的数据库的约束 非空约束（NULL/NOT NULL） 唯一约束（UNIQUE） 主键约束（PRIMARY KEY） 外键约束（FOREIGN KEY） 检查约束（CHECK） 98.数据管理技术的发展过程 人工管理阶段 文件系统阶段 数据库系统阶段 99.SQL关系数据库的标准语言 100.SQL特点 综合统一 高度非过程化 面向集合的操作方式 以同一种语法结构提供多种使用方式 语言简洁，易学易用 101.DDL数据库定义语言 102.DQL数据库查询语言 103.DML数据库操纵语言 104.DCL数据控制语言，用于控制用户对数据的访问权限 105.关系语言的分类 关系代数语言 关系演算语言 SQL语言 106.数据库安全性控制的常用办法 用户身份鉴别 存取控制 视图机制 审计 数据加密 107.ODBC的优点 移植性好 能同时访问不同的数据库 108.ODBC的工作流程 配置数据源 初始化环境 建立连接 分配语句句柄 执行SQL语句 结果集处理 中止处理 109.数据库系统的故障的种类 事务内部的故障 系统故障 介质故障 计算机病毒 110.E-R图转换成关系模型的原则 E-R图的实体转换为关系（表名） E-R图的属性转换为关系的属性 E-R图的联系转换成关系模型要根据联系的类型一对一、一对多、多对多分别讨论 111.数据库的级联数据库的级联是用来设计一对多的关系。比如级联更新的时候，如果一个主键值被改了，那么和它关联的外键也需要修改","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"考研复试","slug":"考研复试","permalink":"https://hemiaomiao.github.io/tags/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"},{"name":"数据库","slug":"数据库","permalink":"https://hemiaomiao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"author":"Miaomiao"},{"title":"计算机复试之英语面试","slug":"计算机考研复试之英语面试","date":"2020-03-10T14:16:02.000Z","updated":"2021-09-16T16:24:36.604Z","comments":true,"path":"2020/03/10/计算机考研复试之英语面试/","link":"","permalink":"https://hemiaomiao.github.io/2020/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95%E4%B9%8B%E8%8B%B1%E8%AF%AD%E9%9D%A2%E8%AF%95/","excerpt":"","text":"一. 英语自我介绍的思路：第一段：名字 + 年龄 + 籍贯 + 专业第二段：奖学金+比赛获奖情况第三段：性格 + 考研原因 + 选择这个学校的原因 + 录取之后的承诺 二. 中文自我介绍： 我的名字是XX，XX，我来自XX省XX市。2019年我从大学毕业，我的专业是软件工程。 在大学期间，我大部分时间都在学习上。我已经通过了大学英语4级。我获得了三等奖学金和国家励志奖学金。除此之外，我参加了我们系的ACM算法团队。我参加了蓝桥杯比赛，并获得了省级一等奖和国家三等奖。当然，这些荣誉也是仅代表过去，更宝贵的是大学四年的经历。 我认为我是一个努力的学生。我对编程有浓厚的兴趣，因此我想获得进一步地教育。中国民航大学的浓厚学术氛围吸引了我。如果我能被这所大学录取，我将尽力提高自己的专业水平和实践能力。 三. 英文自我介绍： Good morning/afternoon,deer professors. It is my honor to take this interview. My name is XX,XX years old. I come from XX, XX Province.I graduated from university in 2019.My major was software engineering.&nbsp; During my college life,I spend most of my time on study.I have passed College English Test level 4.I obtained the third-class scholarship and the National Encouragement Scholarship.In addition, I took part in the ACM algorithm team of our department.I participated in the LanQiao Cup Competition ,and won the provincial first prize and national third prize.Of course, these honors only represent the past, more precious is the experiences of the four years in college. I think that I am a hard-working student.I have a strong interest in programming,so I want to get further education.大学名字 attracts me with the strong academic atmosphere.&nbsp;If I can be admitted to this university, I will try my best to improve my professional level and practical ability. That’s all. Thank you. 四. 英文问题：​( 1 ) 个人问题 1. 为什么选择XX大学 ( choose to study at our school / institute ) Firstly,this university has good teachers and I want to be guided by them.Secondly,I am deeply attracted by the strong academic atmosphere in this university.I think that I will be able to broaden my horizon and deepen my knowledge in this university. 首先，这所大学有好的老师，我想被他们指导。第二，我是深深的被这所学校的浓厚的学术氛围吸引。我认为我将能够在这所大学拓宽我的视野，加深我的知识。 2. 为什么要考研 / 为什么辞职考研 ( take the postgraduate examination / go back to study instead of going on with your work / graduate school ) Firstly,I have a strong interest in computer.I hope that I can make some progress in the academic fields.Secondly,I want to engage in the work related to frontier fields in the future, but the courses during my undergraduate study are not enough to support me to find a job in these fields. So I choose to take the postgraduate examination. 第一，我对计算机有浓厚的兴趣。我希望我能在学术领域能有所进步。第二，我想在未来从事前沿技术相关的工作，但是本科期间的课程不足以支撑我在这个领域找到工作。所以我选择参加研究生考试。 resignation [ˌrezɪɡˈneɪʃn]&nbsp; 辞职 resign [rɪˈzaɪn]&nbsp; 辞职 3. 读了研究生后的计划 ( plan in the postgraduate study ) Firstly,I will try my best to study professional knowledge.Secondly,I will participate in the research project of the teacher.Under the guidance of the teacher,I will choose certain research direction.Thirdly,I will read the paper actively and cherish every practical opportunity.Finally,I will continue to strengthen my English level. 第一，我会努力学习专业知识。第二，我会参加老师的研究项目。在老师的指导下，我会选择确定的研究方向。第三，我会积极阅读论文并珍惜每一次的实践机会。最后，我将继续提高我的英语水平。 4. 如何平衡学习和课余生活 I developed a good habit of making plans.I will stick the plan on the computer desktop.When I finish a small goal,I will give myself a certain reward.Since then,my study and life have become more organized. 我养成了制定计划的好习惯。我将粘贴计划在计算机桌面上。当我完成一个小目标时，我会给自己一定的奖励。从那时起，我的学习和生活变得更加井井有条。 5. 有什么兴趣爱好（hobby / interest）I like reading books, because the plot of many books are very attractive, after reading it can cause me to think about something.I recently read love you as love life.The author of this book is Wang Xiaobo.I am moved by their spirit of keeping romantic and having their own unique ideas during difficult times. 我喜欢读书，因为许多书的情节都很吸引人，读完它会使我思考一些事情。我最近读过《爱你就像爱生命》，这本书的作者是王小波，我被他们在困难时期保持浪漫并拥有自己独特的想法的精神而打动。 novel [ˈnɑːvl] 小说 6. 介绍一下你的家人 There are four people in my family:father,mother,sister and I.My family is very democratic.My demands and interests will be fully respected by parents.I think my curiosity has a lot to do with my family atmosphere. 在我的家庭有四个人：爸爸，妈妈，妹妹和我。我的家庭是非常民主的。我的要求和兴趣会得到父母的充分尊重。我认为我的好奇心和我的家庭氛围有很大关系 democratic [ˌdeməˈkrætɪk]&nbsp; 民主的 7. 英语的重要性 English is very important for postgraduate students.Because students need to read English paper. 英语对于研究生非常重要。因为学生需要阅读英语论文。 8. 为什么选择这个专业 I am very interested in my major.During my college life,I actively participated in many competitions and got satisfactory results.If I want to make some achievement in my major,I need to continue to carry out in-depth study.This is the reason why I continue to apply for this major. 我对我的专业很感兴趣，在我大学期间，我积极地参加了很多比赛并且取得了令人满意的结果。如果我想在我的专业上取得一些成就，我需要继续进行深入的学习。这就是我继续申请这个专业的原因。 9. 介绍一下你的大学生活（college’s life）I feel that my college life is very colorful.During my college life,I spend most of my time on study.I took part in the ACM algorithm team of our department.I participated in some competitions and got satisfactory results. In addition, I made many friends. 我感觉自己的大学生活是丰富多彩的。在大学期间，我大部分时间都花在学习上。我参加了我系的ACM算法团队。我参加了一些比赛并取得了令人满意的结果。除此之外，我交了很多朋友 10. 介绍一下你的家乡（hometown） I come from LuAn,Anhui Province.My hometown has beautiful landscape and delicious food.The most famous specialty of LuAn is tea.The people here are straightforward and full of passion.I am no exception.Because of my character,I made many friends in university. 我来自安徽六安。我的家乡有美丽的风景和美味的食物。六安最著名的特产是茶叶。这里的人们直率的并且充满热情。我也不例外。由于我的好的性格，我在大学里结了很多朋友。 11. 介绍一下自己的大学 My university is in HeFei.My alma mater is not a famous school,but I appreciate it because it gives me a chance to improve myself.Four years’ study had made me an independent,optimistic people.I really appreciate the education my university gave me. 我的大学在合肥。我的母校不是著名的学校，但是我感激它，因为它给了我一个机会去提高我自己。四年的学习使我成为一个独立，乐观的人。 我非常感谢大学给我的教育。 12. 本科最喜欢的课程（favorite subject） My favorite course is software engineering.Because this course introduce many engineering ideas, which help me form a systematic cognition of software engineering. 我最喜欢的课程是软件工程，因为这门课会介绍很多工程的思想，它帮助我形成了对软件工程的系统认识。 form 形成 systematic [ˌsɪstəˈmætɪk] 系统的 cognition 认识 13. 最喜欢的一本书(favorite book) My favorite book is lox ve you as love life.The author of this book is Wang Xiaobo.I am moved by their spirit of keeping romantic and having their own unique ideas during difficult times. 我最喜欢的一本书是《爱你就像爱生命》，这本书的作者是王小波，我为他们保持浪漫并在困难时期拥有自己独特的想法而感动。 14. 最喜欢的音乐(favorite music) My favorite music is songs of Li Jian. It’s very warm and inspiring. 我最喜欢的音乐是李健的歌曲。它是非常温暖和鼓舞人心的 15. 你的优点是什么(&nbsp;greatest strength/advantage) My advantage is perseverance. Once I decide to get to do some thing, no matter how hard it seems to be, I always make sure that I stick to the end. 我的优点是毅力。一旦我决定做一些事情，无论它看起来多困难，我总是确保坚持到最后 16. 你的缺点是什么( weakness / disadvantage / shortcoming / defect ) Sometimes I have a hard time saying no to others.But I am also happy that I can help others.Therefore,I don’t think it is a complete weakness that I don’t know how to refuse others.As long as it is within my ability, I will try my best to help others. 有时候我不太会拒绝别人。但是我也是开心的我能够帮助其他人。所以我并不认为不知道怎样去拒绝别人是完全的缺点。只要在我的能力范围内，我会尽力去帮助其他人。 17. 为什么来天津上学 I like Tianjin very much. This is a modern city with convenient transportation. And it is very close to Beijing, the capital of our country. 我非常喜欢天津。这是一座现代化的城市，交通很方便，并且距离我国首都北京很近。 18. 你做什么工作 My job is software development / software testing. 我的工作是软件开发 / 软件测试 19. 有没有联系导师 I don’t contact a supervisor.Because my friend told me that I didn’t need to contact tutors before the interview. 我没有联系导师。因为我的朋友告诉我，在面试前我不需要联系导师。 20. 如果没有被录取，会做什么（&nbsp;If you failed this time what will you do） If I couldn’t pass the test,it means that I have some shortcoming in professional knowledge.I will reflect on my problem and try to find the solutions,which is the biggest harvest of this experience. 如果我失败了，那意味着我在专业知识上是有一些缺点，我将反思我的问题并且尝试找到解决方案，这才是这次经历的最大的收货。 harvest [ˈhɑːrvɪst]&nbsp; 收获 21. 某门课不及格的原因 （ fail in this course ) This course is really difficult for me.I spend a lof of time reviewing it.I didn’t expect that I would fail the examination.Later,I passed the make-up examination successfully. 这门课程对我来说确实有一定的难度，我花了很多时间去复习，没想到最后的结果还是不及格。后来，我顺利通过了补考。 22. 怎么管控自己的业余时间/主要时间( control spare time / main time ) When I was in college, I usually work in the lab or study in the library. When I have a break, I read some books. 在大学的时候，我通常在实验室忙项目或者在图书馆学习，休息的时候读书 23.介绍一下最喜欢的老师(favorite teacher) My favorite teacher is the teacher of software engineering.Because she is very humorous and kind. 我最喜欢的老师是软件工程老师，因为她很幽默和善良。 24.介绍一下自己的性格（personality / character) I am a positive and optimistic person. I think that any difficulty can be overcome.Once I decide to get to do some thing, no matter how hard it seems to be, I always make sure that I stick to the end. 我是一个积极并且乐观的人。 我认为任何困难都可以克服。一旦我决定去做某件事，无论看起来有多困难，我都会确保我坚持到底。 25.本科获奖情况（prize / honors and awards ) During my college life,I obtained the third-class scholarship and the National Encouragement Scholarship.In addition, I participated in the LanQiao Cup Competition ,and won the provincial first prize and national third prize. 在大学期间，我获得了三等奖学金和国家励志奖学金。除此之外，我参加了蓝桥杯比赛，并获得了省级一等奖和国家三等奖。 ( 2 ) 学术问题 1. 什么是深度学习（ deep learning ） Deep learning is the biggest breakthrough in the field of artificial intelligence.&nbsp;It is a complete subversion of the traditional computing model, bringing great opportunity for change. 深度学习是人工智能领域的最大突破。它是对传统计算模型的完全颠覆，带来了巨大的变革机会。 subversion [səbˈvɜːrʒn] 颠覆 2. 什么是数据挖掘 （ data mining ） Data mining refers to the process of searching for information hidden in a large amount of data through algorithms. 数据挖掘是指从大量的数据中通过算法搜索隐藏于其中信息的过程。 mining [ˈmaɪnɪŋ] 挖掘 3. 什么是计算机视觉 Computer vision deals with how computers can be made for gaining high-level understanding from digital images or videos.&nbsp;It seeks to automate task that the human visual system can do.&nbsp; 计算机视觉解决了如何制造计算机以从数字图像或视频获得高级理解的问题。它寻求使人类视觉系统可以完成的任务自动化。 visual 视觉的 computer vision 计算机视觉 4. 什么是大数据 (Your understanding of the research direction） The big data is to find useful information from the mass of data. 大数据就是从海量数据中寻找出有用的信息 5. 什么是人工智能 Artificial intelligence refers to the technology of presenting human intelligence through ordinary computer programs. The research scope of artificial intelligence covers many aspects. At present, the most widely used one is machine learning. 人工智能是指通过普通的计算机程序来呈现人类智能的技术。人工智能的研究范围涉及很多方面。目前，最广泛使用的是机器学习。 artificial intelligence 人工智能 machine learning 机器学习 6. 什么是软件工程 Software engineering is to implement software system in an organized and planned way according to engineering. By applying software engineering to software development, the development efficiency and cost can be improved, as well as improve the software quality. 软件工程就是根据工程的需要，有组织、有计划地实施软件系统。通过将软件工程应用于软件开发，可以提高开发效率和成本，提高软件质量。 7. 什么是ACM ACM is an algorithm competition. ACM是算法竞赛。 8. ACM对你的影响 It cultivated my self-learning ability and team spirit.In addition,because the algorithm question was written in English, so it improved my English reading ability. 它培养了我的自学能力和团队合作精神。另外，因为算法问题是用英语写的，因此提高了我的英语阅读能力。 遇到暂时想不出，需要思考的问题：Could you please give me some time to think about this question? 遇到没听清楚的问题：Sorry, I didn’t hear it clearly, could you please speak it again? 遇到不会的问题：Sorry, I don’t know how to answer this question. 回答完问题之后：This is my answer. 遇到暂时想不出，需要思考的问题：Could you please give me some time to think about this question? 遇到没听清楚的问题：Sorry, I didn’t hear it clearly, could you please speak it again? 遇到不会的问题：Sorry, I don’t know how to answer this question. 回答完问题之后：This is my answer.","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"考研复试","slug":"考研复试","permalink":"https://hemiaomiao.github.io/tags/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"}],"author":"Miaomiao"},{"title":"计算机考研复试的准备","slug":"计算机考研复试的准备","date":"2020-03-10T14:16:01.000Z","updated":"2021-09-16T16:23:50.898Z","comments":true,"path":"2020/03/10/计算机考研复试的准备/","link":"","permalink":"https://hemiaomiao.github.io/2020/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95%E7%9A%84%E5%87%86%E5%A4%87/","excerpt":"","text":"复试注意事项​复试准备： 不要染头发、一张草稿纸和笔。 ​如果网上复试的话，一定要保证网络和收音设备没问题，提前测试好。如果中途网络出现问题，直接凉凉。 复试三个部分​英语自我介绍及口语部分、专业课知识考查、综合能力考核。 第一部分：英语面试​ 先进行英文自我介绍，（有的学校可能会有中文自我介绍）。可以去b站看一些up主的介绍，然后改一下。最好找英语专业的同学帮忙看一下细节错误。一定要背的滚瓜烂熟。（我复试太紧张，就背错行了，但是也要硬着头继续背下去，千万不要卡壳） 介绍完成后，会有一位老师考察英语口语部分。题目大概都是些常见的对话，比如：你为什么选我们学校？你想研究什么方向？你的家乡来自哪里？ （这些题目应该都有人整理，可以自己去买）。如果没听清，可以说Parton？让老师重复一遍。如果真的不会，可以只说几个单词。（去年老师问我想学什么研究方向，我就只说了Machine Learning这个单词。宁愿少说，不要犯错）。 第二部分：专业课知识​根据你们复试课考核要求，复习书上的知识点。由于考察是口述，但是会有计算，所以需要先准备好一张草稿纸和笔。 ​ 涉及到计算的知识点一定要练熟，因为复试的时候会很紧张，很难算出来或者算对。 如果是定义的介绍部分，最好多读几遍，保证复试的时候不会卡壳（定义可以不完全按照书上一字不拉的讲），比如我去年的有道题目考“数据库事务的特征”。我先说了分为ACID特征，然后A的全称是什么，具体是什么功能。 第三部分：综合能力考核​主要聊一些大学经历和项目经历。考察学生的科研能力和学术能力 ​复试之前学校会收集每个学生的获奖证明等。奖学金，竞赛都可以，越多越好。 代码能力考核：会问你大学期间做过哪些项目，参加过哪些算法相关的比赛。如果没有获奖也没关系，可以说参加过一些算法培训，有过相关经验。 获奖经历：主要是奖学金，四六级，数学竞赛（有些老师比较看重数学能力）。 科研能力：英语基础比较好，阅读英文文献不费力。自主学习能力强，课余时间学过某些编程语言和一些技术。 毕业设计：如果自己毕设中用了某些算法模型，最好花时间大致搞懂一下。尤其是模型中的参数是多少，参数值为什么要那么设置等。老师不会问代码是增删改查怎么写的，毕竟是研究生复试不是公司面试。 不要讲一些没用的经历，比如参加过什么志愿者，组织了什么娱乐社团活动。老师看中的是科研能力。 总结​前两阶段，书上基础知识要复习扎实。综合部分尽可能表现优秀，但是不懂的东西不要乱说（老师肯定比你懂得多）。主要考察科研能力和个人能力。能显示出科研能力的项目、比赛说的越多越好，先从最重要的说。 ​","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"考研复试","slug":"考研复试","permalink":"https://hemiaomiao.github.io/tags/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"}],"author":"Miaomiao"},{"title":"MarkDown语法","slug":"MarkDown语法","date":"2020-01-13T14:16:01.000Z","updated":"2021-09-17T11:15:21.274Z","comments":true,"path":"2020/01/13/MarkDown语法/","link":"","permalink":"https://hemiaomiao.github.io/2020/01/13/MarkDown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"1.写代码的格式：3个` ( ``` ) 代码内容 3个` ( ``` ) 效果如下： hello world 2.标题## 二级标题 ### 三级标题 效果如下： 二级标题三级标题3.字体**文字加粗** *文字倾斜* ***文字倾斜加粗*** ~~文字加删除线~~ `字体粉红色标出` 效果如下： 文字加粗文字倾斜文字倾斜加粗文字加删除线字体粉红色标出 4.设置字体的大小、颜色、字体风格&lt;font color=red size=3.5&gt;**注意**&lt;/font&gt; 效果如下： 注意 注： 字体颜色的种类 5.给文字加链接[文字内容](链接地址) 效果如下：我的博客 6.插入图片![](图片的链接地址) 效果如下： 7.列表（1）无序列表 * 列表内容 （中间用一个空格隔开） 效果如下： 列表内容 （2）有序列表 1. 列表内容 （中间用一个空格隔开） 效果如下： 列表内容 8.换行时缩进两字符&amp;emsp;文字内容 效果如下： 换行时缩进两字符 9.表格表头|表头|表头 :-|:-:|-: 内容|内容|内容 内容|内容|内容 效果如下： 姓名 技能 排行 刘备 哭 大哥 关羽 打 二 10.文字内容引用&gt; 引用的内容 (中间有一个空格) 效果如下： 奥利给","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"markDown","slug":"markDown","permalink":"https://hemiaomiao.github.io/tags/markDown/"}],"author":"Miaomiao"},{"title":"Java面试题总结","slug":"Java面试题总结","date":"2020-01-13T14:16:01.000Z","updated":"2021-09-16T16:29:28.421Z","comments":true,"path":"2020/01/13/Java面试题总结/","link":"","permalink":"https://hemiaomiao.github.io/2020/01/13/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/","excerpt":"","text":"一.Java基础1. 面向过程和面向对象的区别面向过程的性能比面向对象高，但是面向对象容易维护、容易复用、容易扩展 2. Java的数据类型(1) 基本数据类型 ： 直接赋值就可以① 整型 （byte、short、long、int）② 字符型 （char）③ 浮点型 （float、double）④ 布尔型 （boolean） (2) 引用数据类型 ： 通过关键字new创建对象，然后把这个对象赋给相应的变量String类型是引用数据类型，它比较特殊，可以通过关键字new来创建对象，也可以通过字符串直接赋值。比如：String s = new String(“abc”);String s = “abc”; 3. equals和==的区别 ==用于基本数据类型的变量，比较的是变量的值是否相等 ==用于引用数据类型的变量，比较的是变量所指向的对象的堆内存地址是否相同 equals方法只能比较引用数据类型的变量，不能用于比较基本数据类型的变量。 equals方法如果没有重写，比较的是变量所指向的对象的堆内存地址是否相同 equals方法如果重写了，要看是如何重写的，像String类内部重写了equals方法，比较的是变量所指向的对象的内容是否相同 注：引用数据类型的变量也称为对象的引用 4. Java的内存机制5. 面向对象的特征 封装 :(1) 概念 : 将类的某些信息隐藏在类的内部，只能通过该类提供的公共方法来对隐藏的信息进行操作和访问(2) 实现步骤 : 一般是把属性限制为private私有，封装在一个类里面， 对每个私有属性提供public公共的setter和getter方法例如： public class Person{ private String name; private int age; ​ public int getAge(){ return age; } ​ public String getName(){ return name; } ​ public void setAge(int age){ this.age = age; } ​ public void setName(String name){ this.name = name; } } /* F文件名 : RunEncap.java */ public class RunEncap{ public static void main(String args[]){ EncapTest encap = new EncapTest(); encap.setName(\"James\"); encap.setAge(20); encap.setIdNum(\"12343ms\"); System.out.print(\"Name : \" + encap.getName()+ \" Age : \"+ encap.getAge()); } } 以上代码编译运行结果如下: Name : James Age : 20 public方法是外部类访问该类成员变量的入口任何要访问类中私有成员变量的类都要通过这些getter和setter方法 继承 : 子类通过extends关键字可以继承父类的所有非私有属性和方法 多态 :(1) 概念 ： 同一个行为具有多个不同表现形式(2) 多态存在的三个必要条件 ：① 继承② 重写 ： 子类对父类中某些方法进行重新定义③ 向上转型 ： 父类引用变量指向子类对象，Parent p = new Child();(3) 多态的定义格式 :父类类型 变量名 = new 子类类型();(4) 多态的调用过程 ：当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。","categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hemiaomiao.github.io/tags/Java/"}],"author":"Miaomiao"}],"categories":[{"name":"技术","slug":"技术","permalink":"https://hemiaomiao.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"杂项","slug":"杂项","permalink":"https://hemiaomiao.github.io/categories/%E6%9D%82%E9%A1%B9/"}],"tags":[{"name":"tag1","slug":"tag1","permalink":"https://hemiaomiao.github.io/tags/tag1/"},{"name":"hexo","slug":"hexo","permalink":"https://hemiaomiao.github.io/tags/hexo/"},{"name":"Sakura主题","slug":"Sakura主题","permalink":"https://hemiaomiao.github.io/tags/Sakura%E4%B8%BB%E9%A2%98/"},{"name":"壁纸","slug":"壁纸","permalink":"https://hemiaomiao.github.io/tags/%E5%A3%81%E7%BA%B8/"},{"name":"eg","slug":"eg","permalink":"https://hemiaomiao.github.io/tags/eg/"},{"name":"github","slug":"github","permalink":"https://hemiaomiao.github.io/tags/github/"},{"name":"考研复试","slug":"考研复试","permalink":"https://hemiaomiao.github.io/tags/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"},{"name":"数据结构","slug":"数据结构","permalink":"https://hemiaomiao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"数据库","slug":"数据库","permalink":"https://hemiaomiao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"markDown","slug":"markDown","permalink":"https://hemiaomiao.github.io/tags/markDown/"},{"name":"Java","slug":"Java","permalink":"https://hemiaomiao.github.io/tags/Java/"}]}